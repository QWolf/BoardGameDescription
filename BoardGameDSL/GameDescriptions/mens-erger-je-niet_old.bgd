Name: Mens-erger-je-niet
Players: 2-4 (B,R,Y,G)

LocationTypes{
	field //implied default as top one
	Reserve(owned)
	Goal(owned)
}

Locations{
	Sector(B,Y,R,G)(Spot,Public){ //# is Sector name, which will result in values B1, B2, B3 ..... Y1, Y2 Y3 etc
		#1
		#2
		#3
		#4
		#5
		#6
		#7
		#8
		#9
		#10
		#G1(Goal, Owner=#)
		#G2(Goal, Owner=#)
		#G3(Goal, Owner=#)
		#G4(Goal, Owner=#)
		#Reserve(Reserve, Owner=#)
		
		Connection( 
		//Connection implies one-way connection, whereas Adjacent implies 2-way
		#1,#2
		#2,#3
		#3,#4
		#4,#5
		#5,#6
		#6,#7
		#7,#8
		#8,#9
		#9,#10
	//	#10
		#G1,#G2
		#G2,#G3
		#G3,#G4
	//	#G4
	//Depending on rules also:
	//	#G2,#G1
	//  #G3,#G2
	//  #G4,#G3	
		)
	}
	
	Connection(
		B10,Y1
		B10,YG1
		Y10,R1
		Y10,RG1
		R10,G1
		R10,GG1
		G10,B1
		G10,BG1
	)
	
	Table(Public) //Default available playing area
}

PieceTypes{
	pawn
	die(d6)
}

Pieces{
	PerPlayer{ 
		// #=Player names, defined at top of file, plus starting location
		Pawns(#Reserve)(Type:pawn)(Owner:#){
		#Pawn1
		#Pawn2
		#Pawn3
		#Pawn4
		}
	}
	Die(Table)(die)(Owner:Neutral) //Neutral implied if not specified
}

Setup{
	//What is required to fill in by the setup
	Players
	TurnOrder
	
}

Spelverloop{
	//	TurnOrder(B,R,Y,G)
	Round(repeat){
		Turn{
			throw = Throw(Die)
			ActionsPossible{
				MaxActions = 1
				MinActions = 0 //Is this allowed in this game?
				if(throw == 6){
					StartPawn
					if(isEmpty(#Reserve){
						AdvancePawn
					}
				} else {
					AdvancePawn
				}
			}
		}
	}
}


// # refers to player whose turn it is
Actions{
	StartPawn{
		requires{
			#Reserve contains @pawn(Type:pawn)
		}
		effect{
			if(#1 contains @victim){
				DoAction{
					RemovePawn(@victim)
				}
			}
			Move(@pawn,#)
			AdvancePawn(@pawn, Throw(Die))	
		}
	}
	
	RemovePawn(@victim){
		requires{
			@Reserve Owned by Owner(@victim)
		}
		effect{
			Move(@victim, @Reserve)
		}
	}
	
	AdvancePawn(@pawn, places){
		requires{
			@pawn Placed on @loc
			@loc Connection to @newLoc
			OR{
				@newLoc Owned by Public //alternatively: is field
				@newLoc Owned by #
			}
		}
		effect{
			if(places == 1){
				if(@newLoc contains @victim){
					DoAction{
						RemovePawn(@victim)
					}
				}
				Move(@pawn, @newLoc)
			}else{
				AdvancePawn(@pawn, loc-1)
			}
		}
	}
}
