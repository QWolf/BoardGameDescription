Game = "Mens-erger-je-niet";

Players{
	MinPlayers = 2;
	MaxPlayers = 4;
	//Playnumbers = 2, 4;
	Humans{
		Copy{
			[Y,G]
			}

		B{
			StartLoc= B1;
		}
		R;
	}
	NPCs{
		Bank{
			Var2=234;
		}			
	}
	Teams{
		Blue{
			Members = B, G;
			Var5 = 6543;
		}
		Red{
			Members = R, Y;
			Var5 = 3456;
		}
	}
}

	

Locations{
	Copy{
	[B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8,Y9,Y10,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,G1,G2,G3,G4,G5,G6,G7,G8,G9,G10]
	LocationType = Place;
	}
	Copy{
	[BG1, BG2, BG3, BG4, YG1, YG2, YG3, YG4, RG1,RG2,RG3,RG4,GG1,GG2,GG3,GG4]
	LocationType = Place;
	GoalLocation = True;
	}
	BSupply{
		Owner = B;
		ExistVisible = Public;
		LocationType = Place;
		PawnSupply = True;
	}	
	YSupply{
		Owner = Y;
		ValueVisible = None;
		LocationType = Place;
		PawnSupply = True;
		MultipleVariableTestings = 12345;
	}	
	RSupply{
		Owner = R;
		ExistVisible = [R, Y];
		ValueVisible = None;
		LocationType = Place;
		PawnSupply = True;
	}	
	GSupply{
		Owner = G;
		LocationType = Place;
		PawnSupply = True;
	}
}

LocationConnections{
	
	Directed{
	[B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8,Y9,Y10,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,G1,G2,G3,G4,G5,G6,G7,G8,G9,G10]
		ConnectionsAreLocations = False;
	}
	Directed{
		[G10, B1]
		ConnectionsAreLocations = True;
		ConnectionNames = [G10B1];
	}
	Directed{
		[G10,BG1,BG2,BG3,BG4]
		ConnectionsAreLocations = True;
		ConnectionNames = [B1con, B2con, B3con, B4con];
	}
	Directed{
		[B10,YG1,YG2,YG3,YG4]
	}
	Directed{
		[Y10,RG1,RG2,RG3,RG4]
	}
	Undirected{
		[R10,GG1,GG2,GG3,GG4]
		GreenFinish = True;
	}	
	
}


Objects{
	Pawn{
		Owner = Location;
		Type = Pawn;
		Value = None;
		//Sides
		/* Let's test a block comment :)
		*  Test Test
		*/
		//SidesShown
		Randomizer = None;
	}
	Dice{
		Owner = Public;	
		Type = None;
		Value = 6;
		Randomizer{
			[1,2,3,4,5,6]
			Fair
			
		}
	}
	TestItem{
		Owner = Y;
		Randomizer{
			[1,2,4]
			[0.2, 0.5, 3/10]
		}		
	}		
}


Rounds{
	Main(){
		Loop(TurnOrder, Player t){
			CurrentTurn = t;
			Randomize(NoLoc.Dice);
			Turn(NoLoc.Dice.Value);
		}
		Repeat;
	}
	Turn(int throw){
		TakeAction(0,1);
		
	}
}

Actions{
	StartPawn(Location l){
		Requires{
			NoLoc.Dice.Value == 6;
			l.Owner == CurrentTurn;
			l.PawnSupply == True;
			l.contains().size() > 0;
			or{
				CurrentTurn.Startloc.contains().count()
				CurrentTurn.Startloc.contains()[0].Owner != CurrentTurn;
			}
		}
		effect{
			move(l
		}
	
}

StartState

