Game = "Mens-erger-je-niet";

Players{
	MinPlayers = 2;
	MaxPlayers = 4;
	//Playnumbers = 2, 4;
	
	Human B{
		//AI = true;
		StartLoc = B1;
		SupplyLoc = BSupply;
		GoalLocs = [BG1,BG2,BG3,BG4];
		
	}
	Human Y{
		//AI = true;
		StartLoc = Y1;
		SupplyLoc = YSupply;
		GoalLocs = [YG1,YG2,YG3,YG4];
		
	}	
	Human G{
		//AI = true;
		StartLoc = G1;
		SupplyLoc = GSupply;
		GoalLocs = [GG1,GG2,GG3,GG4];
		
	}	
	Human R{
		//AI = true;
		StartLoc = R1;
		SupplyLoc = RSupply;
		GoalLocs = [RG1,RG2,RG3,RG4];
		
	}	
}

	

Locations{
	B1{
		Locnumber = 1;
	}
	B2{
		Locnumber = 2;
	}
	B3{
		Locnumber = 3;
	}
	B4{
		Locnumber = 4;
	}
	B5{
		Locnumber = 5;
	}
	B6{
		Locnumber = 6;
	}
	B7{
		Locnumber = 7;
	}
	B8{
		Locnumber = 8;
	}
	B9{
		Locnumber = 9;
	}
	B10{
		Locnumber = 10;
	}
	G1{
		Locnumber = 11;
	}
	G2{
		Locnumber = 12;
	}
	G3{
		Locnumber = 13;
	}
	G4{
		Locnumber = 14;
	}
	G5{
		Locnumber = 15;
	}
	G6{
		Locnumber = 16;
	}
	G7{
		Locnumber = 17;
	}
	G8{
		Locnumber = 18;
	}
	G9{
		Locnumber = 19;
	}
	G10{
		Locnumber = 20;
	}
	Y1{
		Locnumber = 21;
	}
	Y2{
		Locnumber = 22;
	}
	Y3{
		Locnumber = 23;
	}
	Y4{
		Locnumber = 24;
	}
	Y5{
		Locnumber = 25;
	}
	Y6{
		Locnumber = 26;
	}
	Y7{
		Locnumber = 27;
	}
	Y8{
		Locnumber = 28;
	}
	Y9{
		Locnumber = 29;
	}
	Y10{
		Locnumber = 30;
	}
	R1{
		Locnumber = 31;
	}
	R2{
		Locnumber = 32;
	}
	R3{
		Locnumber = 33;
	}
	R4{
		Locnumber = 34;
	}
	R5{
		Locnumber = 35;
	}
	R6{
		Locnumber = 36;
	}
	R7{
		Locnumber = 37;
	}
	R8{
		Locnumber = 38;
	}
	R9{
		Locnumber = 39;
	}
	R10{
		Locnumber = 40;
	}
	
	
	BG1{
		Locnumber = 1;
		Goal = True;
		Owner = B;
	}
	BG2{
		Locnumber = 2;
		Goal = True;
		Owner = B;
	}
	BG3{
		Locnumber = 3;
		Goal = True;
		Owner = B;
	}
	BG4{
		Locnumber = 4;
		Goal = True;
		Owner = B;
	}
	
	GG1{
		Locnumber = 11;
		Goal = True;
		Owner = G;
	}
	GG2{
		Locnumber = 12;
		Goal = True;
		Owner = G;
	}
	GG3{
		Locnumber = 13;
		Goal = True;
		Owner = G;
	}
	GG4{
		Locnumber = 14;
		Goal = True;
		Owner = G;
	}
	
	
	YG1{
		Locnumber = 21;
		Goal = True;
		Owner = Y;
	}
	YG2{
		Locnumber = 22;
		Goal = True;
		Owner = Y;
	}
	YG3{
		Locnumber = 23;
		Goal = True;
		Owner = Y;
	}
	YG4{
		Locnumber = 24;
		Goal = True;
		Owner = Y;
	}
	
	RG1{
		Locnumber = 1;
		Goal = True;
		Owner = R;
	}
	RG2{
		Locnumber = 2;
		Goal = True;
		Owner = R;
	}
	RG3{
		Locnumber = 3;
		Goal = True;
		Owner = R;
	}
	RG4{
		Locnumber = 4;
		Goal = True;
		Owner = R;
	}	
	
	BSupply{
		Owner = B;
		PawnSupply = True;
		StartingInventory{
			Pawn PawnB1;
			Pawn PawnB2;
			Pawn PawnB3;
			Pawn PawnB4;
		}
	}	
	YSupply{
		Owner = Y;
		PawnSupply = True;
		StartingInventory{
			Pawn PawnY1;
			Pawn PawnY2;
			Pawn PawnY3;
			Pawn PawnY4;
		}
	}	
	RSupply{
		Owner = R;
		PawnSupply = True;
		StartingInventory{
			Pawn PawnR1;
			Pawn PawnR2;
			Pawn PawnR3;
			Pawn PawnR4;
		}
	}	
	GSupply{
		Owner = G;
		PawnSupply = True;
		StartingInventory{
			Pawn PawnG1;
			Pawn PawnG2;
			Pawn PawnG3;
			Pawn PawnG4;
		}
	}
	
	NoLoc{
		Owner = public;
		StartNewPawnAllowed = True;
		StartingInventory{
			Dice D1;
		}
	}
}

//LocationConnections{
	//Empty, as single connections are not important in MEJN, only order, which is given in location numbers
	
	
//}


Objects{
	Pawn{
		public Owner = Location;
	}
	
	Dice{
		public Owner = public;	
		public Randomizer{
			[1,2,3,4,5,6]
		}
	}	
}


Rounds{
	Main(){
		
		NextTurn;
		Randomize NoLoc.D1;
		Turn();
		Repeat;
	}
	
	Turn(){
		ChooseAction CurrentTurn;	
	}
	
	//Helper Functions
	
	AdjustedGoalNumber(int i){
		if (i < 40){
			return i;
		} else {
			return i-40;
		}
	}	
	
	CheckIsFinished(Player p){
		if( count(p.GoalLocs[0].contains()) != 0 &&
			count(p.GoalLocs[1].contains()) != 0 &&
			count(p.GoalLocs[2].contains()) != 0 &&
			count(p.GoalLocs[3].contains()) != 0 ){
				Winner p;
				FinishGame;
		}
	}
}

Actions{
	StartPawn(Location l){
		requires{
			NoLoc.StartNewPawnAllowed == True;
			NoLoc.D1.Value == 6;
			l.Owner == CurrentTurn;
			l.PawnSupply == True;
			count(l.contains()) > 0;
			count(CurrentTurn.Startloc.contains()) == 0
			||
			CurrentTurn.Startloc.contains()[0].Owner != CurrentTurn;
		}effect{
			move l.contains()[0]  CurrentTurn.Startloc;
			Randomize NoLoc.D1;
			NoLoc.StartNewPawnAllowed = False;
			Turn();
			NoLoc.StartNewPawnAllowed = True;
		}
	}
	
	Pass(){
		requires{
		}effect{
		}
	}
	
	MovePawn(Pawn p, Location goal){
		requires{
			p.Owner == CurrentTurn;
			goal.Locnumber == (AdjustedGoalNumber(p.Location.Locnumber + NoLoc.D1.Value));
			(count(goal.contains()) == 0)
			||
			(count(goal.contains()[0].Owner != CurrentTurn));
		}effect{
			//Return taken pawn
			if(count(goal.contains()) != 0){
				move goal.contains()[0] goal.contains()[0].Owner.SupplyLoc;
			}
			//Move own pawn
			move p (GetLocationAhead(p.Location, NoLoc.D1.Value));
			CheckIsFinished(CurrentTurn);
		}
	}
}

StartState

