Game = "Manilla";

Players{
	MinPlayers = 3;
	MaxPlayers = 5;
	
	Human B{
		SupplyLoc = BSupply;	
		HarborMasterInRunning = True;
		EncumberedShares = 0;	
	}
	Human Y{
		SupplyLoc = YSupply;	
		HarborMasterInRunning = True;
		EncumberedShares = 0;	
			
	}	
	Human G{
		SupplyLoc = GSupply;		
		HarborMasterInRunning = True;
		EncumberedShares = 0;	
			
	}	
	Human R{
		SupplyLoc = RSupply;
		HarborMasterInRunning = True;
		EncumberedShares = 0;		
	}
	Human O{
		SupplyLoc = OSupply;
		HarborMasterInRunning = True;
		EncumberedShares = 0;	
	}
	Computer Bank;
}

Locations{
	BSupply{
		Owner = B;
		Pesos = 30;
		ValueVisible = B;
		StartingInventory{
			Pawn PawnB1;
			Pawn PawnB2;
			Pawn PawnB3;
//			Pawn PawnB4;
		}
	}
	YSupply{
		Owner = Y;
		Pesos = 30;
		ValueVisible = Y;
		StartingInventory{
			Pawn PawnY1;
			Pawn PawnY2;
			Pawn PawnY3;
//			Pawn PawnY4;
		}
	}
	GSupply{
		Owner = G;
		Pesos = 30;
		ValueVisible = G;
		StartingInventory{
			Pawn PawnG1;
			Pawn PawnG2;
			Pawn PawnG3;
//			Pawn PawnG4;
		}
	}
	RSupply{
		Owner = R;
		Pesos = 30;
		ValueVisible = R;
		StartingInventory{
			Pawn PawnR1;
			Pawn PawnR2;
			Pawn PawnR3;
//			Pawn PawnR4;
		}
	}
	OSupply{
		Owner = O;
		Pesos = 30;
		ValueVisible = O;
		StartingInventory{
			Pawn PawnO1;
			Pawn PawnO2;
			Pawn PawnO3;
//			Pawn PawnO4;
		}
	}
	Port1{
		BoatIn = False;
		Cost = 4;
		Payout = 6;
		Buyer = Public;
	}
	Port2{
		BoatIn = False;
		Cost = 3;
		Payout = 8;
		Buyer = Public;
	}
	Port3{
		BoatIn = False;
		Cost = 2;
		Payout = 15;
		Buyer = Public;
	}
	Shipyard1{
		BoatIn = False;
		Cost = 4;
		Payout = 6;
		Buyer = Public;
	}
	Shipyard2{
		BoatIn = False;
		Cost = 3;
		Payout = 8;
		Buyer = Public;
	}
	Shipyard3{
		BoatIn = False;
		Cost = 2;
		Payout = 15;
		Buyer = Public;
	}
	BoatNutmeg{
		IsInPlay = False;
		TotalPayout = 24;
		Costs = [2,3,4];
		Buyers = [];
		StartingInventory{
			Dice NutmegDice;
		}
	}
	BoatSilk{
		IsInPlay = False;
		TotalPayout = 30;
		Costs = [3,4,5];
		Buyers = [];
		StartingInventory{
			Dice SilkDice;
		}
	}
	BoatGinseng{
		IsInPlay = False;
		TotalPayout = 18;
		Costs = [1,2,3];
		Buyers = [];
		StartingInventory{
			Dice GinsengDice;
		}
	}
	BoatJade{
		IsInPlay = False;
		TotalPayout = 36;
		Costs = [3,4,5,5];
		Buyers = [];
		StartingInventory{
			Dice JadeDice;
		}
	}
	BoatNone{
	}
	Pirate{
		Captain = Public;
		Accomplice = Public;
		Cost = 5;
	}
	PilotLarge{
		Buyer = Public;
		Cost = 5;
		PilotStrength = 2;
	}
	PilotSmall{
		Buyer = Public;
		Cost = 2;
		PilotStrength = 1;
	}
	Insurance{
		Buyer = Public;
		Cost = 0;
		Income = 10;
	}
	BlackMarket{
		ShareValue = [0,0,5,10,20,30];
		SharePrices = [5,5,5,10,20,30];
		NutmegShare = 0;
		SilkShare = 0;
		GinsengShare = 0;
		JadeShare = 0;
	}
	SeaRoute1{
		CurrentCargo = BoatNone;
		CurrentProgress = 0;
	}
	SeaRoute2{
		CurrentCargo = BoatNone;
		CurrentProgress = 0;
	}
	SeaRoute3{
		CurrentCargo = BoatNone;
		CurrentProgress = 0;
	}
	UnsoldShares{
		HarborMaster = Bank;
		HarborMasterInRunning = 0;
		AuctionIsGoingOn = True;
		AuctionHighestBid = 0;
		Owner = Bank;
		NewTurnOrder = [Y,O,B];
		
	}
	
	ShufflePile{
		EncumberingPlayer = Bank;
		ValueVisible = None;
		StartingInventory {
			Share NutmegShare1{
				hidden IsNutmegShare = True;
			}
			Share NutmegShare2{
				hidden IsNutmegShare = True;
			}
			Share NutmegShare3{
				hidden IsNutmegShare = True;
			}
			Share NutmegShare4{
				hidden IsNutmegShare = True;
			}
			Share NutmegShare5{
				hidden IsNutmegShare = True;
			}
			Share SilkShare1{
				hidden IsSilkShare = True;
			}
			Share SilkShare2{
				hidden IsSilkShare = True;
			}
			Share SilkShare3{
				hidden IsSilkShare = True;
			}
			Share SilkShare4{
				hidden IsSilkShare = True;
			}
			Share SilkShare5{
				hidden IsSilkShare = True;
			}
			Share GinsengShare1{
				hidden IsGinsengShare = True;
			}
			Share GinsengShare2{
				hidden IsGinsengShare = True;
			}
			Share GinsengShare3{
				hidden IsGinsengShare = True;
			}
			Share GinsengShare4{
				hidden IsGinsengShare = True;
			}
			Share GinsengShare5{
				hidden IsGinsengShare = True;
			}
			Share JadeShare1{
				hidden IsJadeShare = True;
			}
			Share JadeShare2{
				hidden IsJadeShare = True;
			}
			Share JadeShare3{
				hidden IsJadeShare = True;
			}
			Share JadeShare4{
				hidden IsJadeShare = True;
			}
			Share JadeShare5{
				hidden IsJadeShare = True;
			}

		}	
	}
		
}

Objects{
	Pawn{
		public Owner = Location;
	}
	
	Dice{
		public Owner = public;	
		public Randomizer{
			[1,2,3,4,5,6]
		}
	}	
	Share{
		hidden IsNutmegShare = False;
		hidden IsSilkShare = False;
		hidden IsGinsengShare = False;
		hidden IsJadeShare = False;	
		public IsEncumbered = False;
		public EncumberenceValue = 12;
		public BuyBackPrice = 15;
	}
}

Rounds{

	//Helper Functions
	SpendingLimit(Player p){
		return p.Pesos + (count(p.SupplyLoc)*(p.SupplyLoc.contains[0].EncumberenceValue));
	}
	
	EncumberUntilOutOfDebt(Player p){
		if(p.EncumberedShares == count(p.SupplyLoc.contains())){
			//Bankrupt!
			p.Pesos = 0;
		}else{
			ShufflePile.EncumberingPlayer = p;
			ChooseAction(p);
			if(p.Pesos < 0){
				EncumberUntilOutOfDebt(p);
			}
		}
	}
	
	Pay(Player p, int amnt){
		p.Pesos = p.Pesos - amnt;
		if(p.Pesos < 0){
			UnsoldShares.IsEncumbering == True;
			EncumberUntilOutOfDebt(p);
			UnsoldShares.IsEncumbering == False;
		}
	}
	
	GetTurnOrderStartingWithCurrentTurn(){
		UnsoldShares.NewTurnOrder = TurnOrder;
		UnsoldShares.NewTurnOrder[0] = CurrentTurn;
		NextTurn;
		UnsoldShares.NewTurnOrder[1] = CurrentTurn;
		NextTurn;
		UnsoldShares.NewTurnOrder[2] = CurrentTurn;
		NextTurn;
		
		if(count(TurnOrder > 3)){
			UnsoldShares.NewTurnOrder[3] = CurrentTurn;
			NextTurn;
		}
		if(count(TurnOrder < 4)){
			UnsoldShares.NewTurnOrder[4] = CurrentTurn;
			NextTurn;
		}
		TurnOrder = UnsoldShares.NewTurnOrder;
	}

	AuctionRound(){
		//If current player is not bidding, get to next player
		if(CurrentTurn.HarborMasterInRunning){
		
			//If more people in auction, do action and repeat. Else, get paying
			if(UnsoldShares.HarborMasterInRunning > 1){
				ChooseAction CurrentTurn;
				NextTurn;
				Repeat;	
			} else {
				GetTurnOrderStartingWithCurrentTurn();
				Pay(CurrentTurn, UnsoldShares.AuctionHighestBid);
			}
		} else {
			NextTurn;
			Repeat;
		}
	}
	
	
	AuctionHarborMaster(){
		TurnOrder = TurnOrder;
		UnsoldShares.AuctionIsGoingOn = True;
		UnsoldShares.AuctionHighestBid = 0;
		AuctionRound();
		UnsoldShares.AuctionIsGoingOn = False;	
	}
	
	PerformHarborMasterDuties(){
		//Buy Shares
		//Send Ships to sea
	}
	



	Main(){	
		AuctionHarborMaster();
		PerformHarborMasterDuties();
		PlaceAndRollRounds();
		ProfitDistribution();
		WareValueRise();
		Repeat;
	}
}
Actions{

//Auction
	AuctionBid(int bid){
		requires{
			AuctionIsGoingOn == True;
			bid > UnsoldShares.AuctionHighestBid;
			SpendingLimit(CurrentTurn) >= bid;
			UnsoldShares.IsEncumbering == False;
		}effect{
			UnsoldShares.AuctionHighestBid = bid;
		}
	}
	
	AuctionPass(){
		requires{
			AuctionIsGoingOn == True;
			UnsoldShares.IsEncumbering == False;
		}effect{
			CurrentTurn.HarborMasterInRunning = False;
		}
	}
	
	
	//Encumbering Shares
	EncumberShare(Share s){
		requires{
			UnsoldShares.IsEncumbering == True;
			s.Location.Owner == ShufflePile.EncumberingPlayer;
			s.IsEncumbered == False;
		
		}effect{
			s.IsEncumbered = True;
			ShufflePile.EncumberingPlayer.EncumberedShares = ShufflePile.EncumberingPlayer.EncumberedShares + 1;
		
		}
	}
	
	UnencumberShare(Share s){
		requires{
			s.IsEncumbered == True;
			s.Location.Owner == CurrentTurn;
		}effect{
			Pay(CurrentTurn, s.BuyBackPrice);
			s.IsEncumbered = False;
			CurrentTurn.EncumberedShares = CurrentTurn.EncumberedShares - 1;
			ChooseAction(CurrentTurn);
		}
	}
	
}


StartState{
	//Shuffle UnsoldShares;
	move ShufflePile.contains()[0] TurnOrder[0].SupplyLoc;
	move ShufflePile.contains()[0] TurnOrder[0].SupplyLoc;
	move ShufflePile.contains()[0] TurnOrder[1].SupplyLoc;
	move ShufflePile.contains()[0] TurnOrder[1].SupplyLoc;
	move ShufflePile.contains()[0] TurnOrder[2].SupplyLoc;
	move ShufflePile.contains()[0] TurnOrder[2].SupplyLoc;
	if(count(TurnOrder) > 3){
		move ShufflePile.contains()[0] TurnOrder[3].SupplyLoc;
		move ShufflePile.contains()[0] TurnOrder[3].SupplyLoc;
	} else {
		move ShufflePile.contains()[0] UnsoldShares;
		move ShufflePile.contains()[0] UnsoldShares;
	}
	
	if(count(TurnOrder) > 4){
		move ShufflePile.contains()[0] TurnOrder[4].SupplyLoc;
		move ShufflePile.contains()[0] TurnOrder[4].SupplyLoc;
	} else {
		move ShufflePile.contains()[0] UnsoldShares;
		move ShufflePile.contains()[0] UnsoldShares;
	}	
	
	//Move rest of shares to public marketplace
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;
	move ShufflePile.contains()[0] UnsoldShares;	


	HarborMaster = TurnOrder[0];
}
